package view;

import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.NodeStep;
import model.moldenv.MoldSim;

public class MainFrame extends javax.swing.JFrame {

    
    private NodeStep nodeStep;
    private MoldSim moldsim;
    private final int NODE_STEP_STATE = 0, MOLD_SIM_STATE = 1;
    private int current_state  = NODE_STEP_STATE;
    
    public MainFrame() {
        initComponents();
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File("resource/france/templatemap_quartersize.png"));
        } catch (Exception e) {}
        
        nodeStep = new NodeStep(img,
                nodeRadiusSlider.getValue(),
                nodeNumberSlider.getValue(),
                proximityPenaltySlider.getValue(),
                populationSlider.getValue(),
                crossoverRateSlider.getValue()/(double)crossoverRateSlider.getMaximum(),
                mutationRateSlider.getValue()/(double)mutationRateSlider.getMaximum() / 5.
        );
        
        crossoverLabel.setText("" + (crossoverRateSlider.getValue()/(double)crossoverRateSlider.getMaximum()));
        mutationLabel.setText("" + (mutationRateSlider.getValue()/(double)mutationRateSlider.getMaximum() / 5.));
        
        drawPanel.setDisplayer(nodeStep.getEnvDisplay());
        updateView();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        nodeStepPanel = new javax.swing.JPanel();
        loadMapButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        populationSlider = new javax.swing.JSlider();
        generationSlider = new javax.swing.JSlider();
        crossoverRateSlider = new javax.swing.JSlider();
        mutationRateSlider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        nodeNumberSlider = new javax.swing.JSlider();
        nodeRadiusSlider = new javax.swing.JSlider();
        proximityPenaltySlider = new javax.swing.JSlider();
        oneGenButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        bestRadioButton = new javax.swing.JRadioButton();
        worstRadioButton = new javax.swing.JRadioButton();
        medianRadioButton = new javax.swing.JRadioButton();
        contGenButton = new javax.swing.JButton();
        populationSizeLabel = new javax.swing.JLabel();
        generationLabel = new javax.swing.JLabel();
        crossoverLabel = new javax.swing.JLabel();
        mutationLabel = new javax.swing.JLabel();
        nodeNumberLabel = new javax.swing.JLabel();
        nodeRadiusLabel = new javax.swing.JLabel();
        proximityPenaltyLabel = new javax.swing.JLabel();
        currentGenLabel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        bestFitnessLabel = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        startSlimeSimulationButton = new javax.swing.JButton();
        drawPanel = new view.NodePanel();
        slimeMoldPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        turningAngleSlider = new javax.swing.JSlider();
        offsetLengthSlider = new javax.swing.JSlider();
        agentCountSlider = new javax.swing.JSlider();
        agentCountLabel = new javax.swing.JLabel();
        offsetLengthLabel = new javax.swing.JLabel();
        turningAngleLabel = new javax.swing.JLabel();
        slimeResetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 600));

        nodeStepPanel.setPreferredSize(new java.awt.Dimension(400, 456));

        loadMapButton.setText("Load Map");
        loadMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMapButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 20)); // NOI18N
        jLabel1.setText("Map");

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 20)); // NOI18N
        jLabel2.setText("Genetic Algorithm");

        jLabel3.setText("Population size:");

        jLabel4.setText("Generations:");

        jLabel5.setText("Crossover rate:");

        jLabel6.setText("Mutation rate:");

        populationSlider.setMajorTickSpacing(50);
        populationSlider.setMaximum(400);
        populationSlider.setMinorTickSpacing(10);
        populationSlider.setToolTipText("");
        populationSlider.setValue(200);
        populationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                populationSliderStateChanged(evt);
            }
        });

        generationSlider.setMaximum(1000);
        generationSlider.setToolTipText("");
        generationSlider.setValue(400);
        generationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                generationSliderStateChanged(evt);
            }
        });

        crossoverRateSlider.setValue(80);
        crossoverRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                crossoverRateSliderStateChanged(evt);
            }
        });

        mutationRateSlider.setMaximum(400);
        mutationRateSlider.setToolTipText("");
        mutationRateSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mutationRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mutationRateSliderStateChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Liberation Sans", 1, 20)); // NOI18N
        jLabel7.setText("Environment Variables");

        jLabel8.setText("Number of nodes:");

        jLabel9.setText("Node radius:");

        jLabel10.setText("Proximity penalty:");

        nodeNumberSlider.setMaximum(30);
        nodeNumberSlider.setValue(20);
        nodeNumberSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nodeNumberSliderStateChanged(evt);
            }
        });

        nodeRadiusSlider.setMajorTickSpacing(10);
        nodeRadiusSlider.setValue(25);
        nodeRadiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nodeRadiusSliderStateChanged(evt);
            }
        });
        nodeRadiusSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                nodeRadiusSliderMouseReleased(evt);
            }
        });

        proximityPenaltySlider.setMaximum(200);
        proximityPenaltySlider.setToolTipText("");
        proximityPenaltySlider.setValue(40);
        proximityPenaltySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                proximityPenaltySliderStateChanged(evt);
            }
        });

        oneGenButton.setText("Run specified generations");
        oneGenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneGenButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Liberation Sans", 1, 20)); // NOI18N
        jLabel11.setText("Display");

        buttonGroup1.add(bestRadioButton);
        bestRadioButton.setSelected(true);
        bestRadioButton.setText("Best");
        bestRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(worstRadioButton);
        worstRadioButton.setText("Worst");

        buttonGroup1.add(medianRadioButton);
        medianRadioButton.setText("Median");

        contGenButton.setText("Run continous");
        contGenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contGenButtonActionPerformed(evt);
            }
        });

        populationSizeLabel.setText("50");

        generationLabel.setText("200");

        crossoverLabel.setText("0.5");

        mutationLabel.setText("0.02");

        nodeNumberLabel.setText("10");

        nodeRadiusLabel.setText("50");

        proximityPenaltyLabel.setText("100");

        currentGenLabel.setText("0");

        jLabel13.setText("Current Generation:");

        jLabel14.setText("Best Fitness:");

        bestFitnessLabel.setText("0");

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        startSlimeSimulationButton.setText("Slime Mold");
        startSlimeSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSlimeSimulationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout nodeStepPanelLayout = new javax.swing.GroupLayout(nodeStepPanel);
        nodeStepPanel.setLayout(nodeStepPanelLayout);
        nodeStepPanelLayout.setHorizontalGroup(
            nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nodeStepPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nodeStepPanelLayout.createSequentialGroup()
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, nodeStepPanelLayout.createSequentialGroup()
                                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(proximityPenaltySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nodeRadiusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nodeNumberSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, nodeStepPanelLayout.createSequentialGroup()
                                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, nodeStepPanelLayout.createSequentialGroup()
                                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(crossoverRateSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                                .addComponent(generationSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(populationSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(mutationRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(2, 2, 2))
                                    .addGroup(nodeStepPanelLayout.createSequentialGroup()
                                        .addComponent(bestRadioButton)
                                        .addGap(49, 49, 49)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bestFitnessLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel7)
                                .addGroup(nodeStepPanelLayout.createSequentialGroup()
                                    .addComponent(oneGenButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(contGenButton)))
                            .addGroup(nodeStepPanelLayout.createSequentialGroup()
                                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(medianRadioButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(populationSizeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(generationLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(crossoverLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nodeNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nodeRadiusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(proximityPenaltyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(currentGenLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(nodeStepPanelLayout.createSequentialGroup()
                                .addComponent(mutationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nodeStepPanelLayout.createSequentialGroup()
                        .addComponent(worstRadioButton)
                        .addGap(468, 468, 468))
                    .addGroup(nodeStepPanelLayout.createSequentialGroup()
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(nodeStepPanelLayout.createSequentialGroup()
                                .addComponent(loadMapButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton))
                            .addComponent(startSlimeSimulationButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        nodeStepPanelLayout.setVerticalGroup(
            nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nodeStepPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadMapButton)
                    .addComponent(resetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(nodeStepPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(populationSizeLabel))
                            .addComponent(populationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(generationLabel))
                            .addComponent(generationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(crossoverLabel)
                            .addComponent(jLabel5)))
                    .addComponent(crossoverRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nodeStepPanelLayout.createSequentialGroup()
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mutationLabel)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addComponent(mutationRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(nodeNumberLabel))
                    .addComponent(nodeNumberSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(nodeRadiusLabel))
                    .addComponent(nodeRadiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nodeStepPanelLayout.createSequentialGroup()
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(proximityPenaltyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(oneGenButton)
                            .addComponent(contGenButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(currentGenLabel)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(nodeStepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bestRadioButton)
                            .addComponent(jLabel14)
                            .addComponent(bestFitnessLabel)))
                    .addComponent(proximityPenaltySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(worstRadioButton)
                .addGap(8, 8, 8)
                .addComponent(medianRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startSlimeSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drawPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        jLabel12.setFont(new java.awt.Font("Liberation Sans", 1, 20)); // NOI18N
        jLabel12.setText("Slime Mold");

        jLabel15.setText("Agent Count:");

        jLabel16.setText("Offset Length:");

        jLabel17.setText("Turning Angle:");

        turningAngleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                turningAngleSliderStateChanged(evt);
            }
        });

        offsetLengthSlider.setMajorTickSpacing(10);
        offsetLengthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetLengthSliderStateChanged(evt);
            }
        });

        agentCountSlider.setMaximum(5000);
        agentCountSlider.setMinimum(400);
        agentCountSlider.setValue(3000);
        agentCountSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                agentCountSliderStateChanged(evt);
            }
        });

        agentCountLabel.setText("3000");

        offsetLengthLabel.setText("30");

        turningAngleLabel.setText("0.32");

        slimeResetButton.setText("Reset");
        slimeResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slimeResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout slimeMoldPanelLayout = new javax.swing.GroupLayout(slimeMoldPanel);
        slimeMoldPanel.setLayout(slimeMoldPanelLayout);
        slimeMoldPanelLayout.setHorizontalGroup(
            slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(slimeResetButton)
                        .addContainerGap(374, Short.MAX_VALUE))
                    .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(0, 383, Short.MAX_VALUE))
                    .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(offsetLengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(agentCountSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(turningAngleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(agentCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(offsetLengthLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(turningAngleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        slimeMoldPanelLayout.setVerticalGroup(
            slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slimeMoldPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(agentCountSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agentCountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(offsetLengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offsetLengthLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(slimeMoldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(turningAngleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(turningAngleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slimeResetButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodeStepPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(slimeMoldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nodeStepPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(slimeMoldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setSlidersEnable(boolean val) {
        populationSlider.setEnabled(val);
        generationSlider.setEnabled(val);
        crossoverRateSlider.setEnabled(val);
        mutationRateSlider.setEnabled(val);
        nodeNumberSlider.setEnabled(val);
        nodeRadiusSlider.setEnabled(val);
        proximityPenaltySlider.setEnabled(val);
        
    }
    
    private void updateView() {
        if(current_state == NODE_STEP_STATE) {
            slimeMoldPanel.setVisible(false);
            nodeStepPanel.setVisible(true);
            
            drawPanel.setDisplayer(nodeStep.getEnvDisplay());
            
            int[] sol = null;
            if(bestRadioButton.isSelected()) {
                sol = nodeStep.getGA().getBest().a;
            } else if (worstRadioButton.isSelected()) {
                sol = nodeStep.getGA().getWorst().a;
            } else {
                sol = nodeStep.getGA().getMedian().a;
            }

            nodeStep.getEnvDisplay().setSol(sol);
            drawPanel.repaint();

            currentGenLabel.setText("" + nodeStep.getGA().getCurrentGeneration());
            bestFitnessLabel.setText("" + nodeStep.getGA().getBest().b);
            
            populationSizeLabel.setText("" + populationSlider.getValue());
            generationLabel.setText("" + generationSlider.getValue());
            double rate = crossoverRateSlider.getValue()/(double)crossoverRateSlider.getMaximum();
            crossoverLabel.setText("" + rate);
            rate = mutationRateSlider.getValue()/(double)mutationRateSlider.getMaximum() / 5.;
            mutationLabel.setText("" + Math.round(rate * 100) / 100.);
            
            nodeNumberLabel.setText("" + nodeNumberSlider.getValue());
            nodeRadiusLabel.setText("" + nodeRadiusSlider.getValue());
            proximityPenaltyLabel.setText("" + proximityPenaltySlider.getValue());
        } else if (current_state == MOLD_SIM_STATE) {
            slimeMoldPanel.setVisible(true);
            nodeStepPanel.setVisible(false);
            
            drawPanel.setDisplayer(moldsim);
            
            agentCountLabel.setText(""+ agentCountSlider.getValue());
            offsetLengthLabel.setText(""+ offsetLengthSlider.getValue());
            turningAngleLabel.setText(""+ Math.round((turningAngleSlider.getValue() * Math.PI / 400) * 100) / 100.);
            
        }
    }
    
    private void bestRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bestRadioButtonActionPerformed

    private void loadMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMapButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileNameExtensionFilter("image", "jpg", "png"));
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            BufferedImage img = null;
            try {
                img = ImageIO.read(new File(fileChooser.getSelectedFile().getAbsolutePath()));
                nodeStep.setMap(img);
                nodeStep.getGA().reset();
                updateView();
            } catch (Exception e) {}
        }
    }//GEN-LAST:event_loadMapButtonActionPerformed
    
    //<editor-fold desc="Node step actions">
    
    private void populationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_populationSliderStateChanged
        nodeStep.setPopulationSize(populationSlider.getValue());
        populationSizeLabel.setText("" + populationSlider.getValue());
        
    }//GEN-LAST:event_populationSliderStateChanged

    private void generationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_generationSliderStateChanged
        generationLabel.setText("" + generationSlider.getValue());
    }//GEN-LAST:event_generationSliderStateChanged

    private void crossoverRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_crossoverRateSliderStateChanged
        double rate = crossoverRateSlider.getValue()/(double)crossoverRateSlider.getMaximum();
        nodeStep.setCrossoverRate(rate);
        crossoverLabel.setText("" + rate);
    }//GEN-LAST:event_crossoverRateSliderStateChanged

    private void mutationRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mutationRateSliderStateChanged
        double rate = mutationRateSlider.getValue()/(double)mutationRateSlider.getMaximum() / 5.;
        nodeStep.setMutationRate(rate);
        mutationLabel.setText("" + Math.round(rate * 100) / 100.);
    }//GEN-LAST:event_mutationRateSliderStateChanged

    private void nodeNumberSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nodeNumberSliderStateChanged
        nodeStep.setNodeNumber(nodeNumberSlider.getValue());
        nodeNumberLabel.setText("" + nodeNumberSlider.getValue());
        nodeStep.getGA().reset();
    }//GEN-LAST:event_nodeNumberSliderStateChanged

    private void nodeRadiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nodeRadiusSliderStateChanged
        nodeRadiusLabel.setText("" + nodeRadiusSlider.getValue());
        updateView();
    }//GEN-LAST:event_nodeRadiusSliderStateChanged

    private void proximityPenaltySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_proximityPenaltySliderStateChanged
        nodeStep.setProximityPenalty(proximityPenaltySlider.getValue());
        proximityPenaltyLabel.setText("" + proximityPenaltySlider.getValue());
    }//GEN-LAST:event_proximityPenaltySliderStateChanged

    private void oneGenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneGenButtonActionPerformed
        setSlidersEnable(false);
        for(int i = 0; i < generationSlider.getValue(); i++) {
            nodeStep.getGA().performGeneration();
        }
        updateView();
        setSlidersEnable(true);
    }//GEN-LAST:event_oneGenButtonActionPerformed
    
    private boolean runningGA = false;
    private Thread gaThread;
    private Timer timer;
    private void contGenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contGenButtonActionPerformed
        if(!runningGA) {
            setSlidersEnable(false);
            contGenButton.setText("Stop");
            timer = new Timer(10, e -> {
                for(int i = 0; i < generationSlider.getValue(); i++) {
                    nodeStep.getGA().performGeneration();
                }
                updateView();
            });
            
            /*gaThread = new Thread(() -> {
               while(timer.isRunning()) {
                   
               }
            });
            gaThread.run();*/
            timer.start();
            
        } else {
            timer.stop();
            setSlidersEnable(true);
            contGenButton.setText("Run continous");
            
        }
        runningGA = !runningGA;
        
    }//GEN-LAST:event_contGenButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        nodeStep.getGA().reset();
        updateView();
    }//GEN-LAST:event_resetButtonActionPerformed
    
    //</editor-fold>
   
    private void startSlimeSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSlimeSimulationButtonActionPerformed
        current_state = MOLD_SIM_STATE;
        slimeResetButton.doClick();
        updateView();
        
        
        drawPanel.setDisplayer(null);
        drawPanel.repaint();
        repaint();
        drawPanel.setDisplayer(moldsim);
        drawPanel.repaint();
        
        timer = new Timer(20, (t) -> {
            for (int j = 0; j < 20; j++) {
                moldsim.updateMap();
            }
            drawPanel.repaint();
        });
        timer.start();
        
        
        
    }//GEN-LAST:event_startSlimeSimulationButtonActionPerformed

    private void slimeResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slimeResetButtonActionPerformed
        
        moldsim = new MoldSim(
                agentCountSlider.getValue(),
                offsetLengthSlider.getValue(),
                (float)(turningAngleSlider.getValue() * Math.PI / 200), 
                nodeStep.getEnvironment().exportForSlimeMold(nodeStep.getGA().getBestSol()),
                nodeStep.getEnvironment().getWidth(), 
                nodeStep.getEnvironment().getHeight(),
		nodeStep.getEnvironment().getPopmap()
	);
    }//GEN-LAST:event_slimeResetButtonActionPerformed

    private void agentCountSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_agentCountSliderStateChanged
        slimeResetButton.doClick();
        updateView();
    }//GEN-LAST:event_agentCountSliderStateChanged

    private void offsetLengthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetLengthSliderStateChanged
        moldsim.setOffsetLength(offsetLengthSlider.getValue());
	updateView();
    }//GEN-LAST:event_offsetLengthSliderStateChanged

    private void turningAngleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_turningAngleSliderStateChanged
        moldsim.setAngle((float)(turningAngleSlider.getValue() * Math.PI / 200));
	updateView();
    }//GEN-LAST:event_turningAngleSliderStateChanged

    private void nodeRadiusSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodeRadiusSliderMouseReleased
        nodeStep.setNodeRadius(nodeRadiusSlider.getValue());
    }//GEN-LAST:event_nodeRadiusSliderMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel agentCountLabel;
    private javax.swing.JSlider agentCountSlider;
    private javax.swing.JLabel bestFitnessLabel;
    private javax.swing.JRadioButton bestRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton contGenButton;
    private javax.swing.JLabel crossoverLabel;
    private javax.swing.JSlider crossoverRateSlider;
    private javax.swing.JLabel currentGenLabel;
    private view.NodePanel drawPanel;
    private javax.swing.JLabel generationLabel;
    private javax.swing.JSlider generationSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton loadMapButton;
    private javax.swing.JRadioButton medianRadioButton;
    private javax.swing.JLabel mutationLabel;
    private javax.swing.JSlider mutationRateSlider;
    private javax.swing.JLabel nodeNumberLabel;
    private javax.swing.JSlider nodeNumberSlider;
    private javax.swing.JLabel nodeRadiusLabel;
    private javax.swing.JSlider nodeRadiusSlider;
    private javax.swing.JPanel nodeStepPanel;
    private javax.swing.JLabel offsetLengthLabel;
    private javax.swing.JSlider offsetLengthSlider;
    private javax.swing.JButton oneGenButton;
    private javax.swing.JLabel populationSizeLabel;
    private javax.swing.JSlider populationSlider;
    private javax.swing.JLabel proximityPenaltyLabel;
    private javax.swing.JSlider proximityPenaltySlider;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel slimeMoldPanel;
    private javax.swing.JButton slimeResetButton;
    private javax.swing.JButton startSlimeSimulationButton;
    private javax.swing.JLabel turningAngleLabel;
    private javax.swing.JSlider turningAngleSlider;
    private javax.swing.JRadioButton worstRadioButton;
    // End of variables declaration//GEN-END:variables

}
